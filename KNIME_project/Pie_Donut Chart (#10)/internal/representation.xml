<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
<entry key="jsNamespace" type="xstring" value="pie_chart_namespace"/>
<config key="jsCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="(pie_chart_namespace = function() {%%00010%%00010%%00009var pie = {};%%00010%%00009var _representation, _value;%%00010%%00009var layoutContainer;%%00010%%00009var MIN_HEIGHT = 100, MIN_WIDTH = 100;%%00010%%00009var chart, svg;%%00010%%00009var knimeTable;%%00010%%00009%%00010%%00009var plotData;%%00010%%00009var colorRange;%%00010%%00009var excludeCat;%%00010%%00009var missValCatValue;%%00010    var _translator;%%00010    var _keyNameMap;%%00010    var _incomingTable;%%00010%%00009%%00010%%00009var showWarnings;%%00010%%00009%%00010%%00009var MISSING_VALUES_ONLY = &quot;missingValuesOnly&quot;;%%00010%%00009var NO_DATA_AVAILABLE = &quot;noDataAvailable&quot;;%%00010%%00010%%00009pie.init = function(representation, value) {%%00010%%00009%%00009_representation = representation;%%00010%%00009%%00009_value = value;%%00010%%00009%%00009_incomingTable = _representation.inObjects[0].table;%%00010%%00009%%00009%%00010%%00009%%00009if(_representation.options.enableSelection &amp;&amp; _representation.inObjects[0].translator) {%%00010        %%00009_translator = _representation.inObjects[0].translator;%%00010        %%00009_translator.sourceID = _representation.inObjects[0].uuid;%%00010        %%00009_translator.targetIDs = [_representation.tableIds[0]];%%00010        %%00009knimeService.registerSelectionTranslator(_translator, _translator.sourceID);%%00010        %%00009subscribeToSelection(_value.options.subscribeToSelection);%%00010        }%%00010%%00009%%00009%%00010%%00009%%00009showWarnings = _representation.options.showWarnings;%%00010%%00009%%00009%%00010%%00009%%00009if (_representation.warnMessage &amp;&amp; showWarnings) {%%00010%%00009%%00009%%00009knimeService.setWarningMessage(_representation.warnMessage);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009drawChart(false);%%00010%%00009%%00009if (_representation.options.enableViewControls) {%%00010%%00009%%00009%%00009drawControls();%%00010%%00009%%00009}%%00010%%00009%%00009_keyNameMap = new KeyNameMap(getClusterToRowMapping());%%00010%%00009}%%00010%%00010%%00009function drawChart(redraw) {%%00009%%00009%%00010%%00009%%00009// Parse the options%%00010%%00009%%00009var optTitle = _value.options[&quot;title&quot;];%%00010%%00009%%00009var optSubtitle = _value.options[&quot;subtitle&quot;];%%00010%%00010%%00009%%00009var showLabels = _value.options[&quot;showLabels&quot;];%%00010%%00009%%00009var labelThreshold = _representation.options[&quot;labelThreshold&quot;];%%00010%%00009%%00009var labelType = _value.options[&quot;labelType&quot;].toLowerCase();%%00010%%00009%%00009%%00009%%00009%%00010%%00009%%00009var optDonutChart = _value.options[&quot;togglePie&quot;];%%00010%%00009%%00009var holeSize = _value.options[&quot;holeSize&quot;];%%00010%%00009%%00009var optInsideTitle = _value.options[&quot;insideTitle&quot;];%%00010%%00010%%00009%%00009var showLegend = _representation.options[&quot;legend&quot;];%%00010%%00010%%00009%%00009var optFullscreen = _representation.options[&quot;svg&quot;][&quot;fullscreen&quot;] &amp;&amp; _representation.runningInView;%%00010%%00009%%00009var optWidth = _representation.options[&quot;svg&quot;][&quot;width&quot;]%%00010%%00009%%00009var optHeight = _representation.options[&quot;svg&quot;][&quot;height&quot;]%%00010%%00009%%00009%%00010%%00009%%00009var optEnableSelection = _representation.options['enableSelection'];%%00010%%00009%%00009%%00010%%00009%%00009var isTitle = optTitle || optSubtitle;%%00010%%00010%%00009%%00009/*%%00010%%00009%%00009 * Setup interactive controls%%00010%%00009%%00009 */%%00010%%00009%%00009%%00010%%00009%%00009d3.select(&quot;html&quot;).style(&quot;width&quot;, &quot;100%&quot;).style(&quot;height&quot;, &quot;100%&quot;);%%00010        d3.select(&quot;body&quot;).style(&quot;width&quot;, &quot;100%&quot;).style(&quot;height&quot;, &quot;100%&quot;);%%00010%%00010%%00009%%00009var body = d3.select(&quot;body&quot;);%%00010%%00010%%00009%%00009var width = optWidth + &quot;px&quot;;%%00010%%00009%%00009var height = optHeight + &quot;px&quot;;%%00010%%00009%%00009if (optFullscreen) {%%00010%%00009%%00009%%00009width = &quot;100%&quot;;%%00010%%00009%%00009%%00009height = (isTitle) ? &quot;100%&quot; : &quot;calc(100% - &quot; + knimeService.headerHeight() + &quot;px)&quot;;%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009var div;%%00010%%00009%%00009if (redraw) {%%00010%%00009%%00009%%00009d3.select(&quot;svg&quot;).remove();%%00010%%00009%%00009%%00009div = d3.select(&quot;#svgContainer&quot;);%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009layoutContainer = body.append(&quot;div&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;layoutContainer&quot;)%%00010%%00009%%00009%%00009%%00009.attr('class', 'knime-layout-container')%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009.style(&quot;width&quot;, width)%%00010%%00009%%00009%%00009%%00009.style(&quot;height&quot;, height)%%00010%%00009%%00009%%00009%%00009.style(&quot;min-width&quot;, MIN_WIDTH + &quot;px&quot;)%%00010%%00009%%00009%%00009%%00009.style(&quot;min-height&quot;, MIN_HEIGHT + &quot;px&quot;);%%00009%%00009%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009div = layoutContainer.append(&quot;div&quot;)%%00010%%00009%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;svgContainer&quot;)%%00010%%00009%%00009%%00009%%00009.attr('class', 'knime-svg-container')%%00010%%00009%%00009%%00009%%00009.style(&quot;min-width&quot;, MIN_WIDTH + &quot;px&quot;)%%00010%%00009%%00009%%00009%%00009.style(&quot;min-height&quot;, MIN_HEIGHT + &quot;px&quot;);%%00010%%00009%%00009}%%00010%%00010%%00009%%00009/*%%00010%%00009%%00009 * Process data%%00010%%00009%%00009 */%%00010%%00009%%00009knimeTable = new kt();%%00010%%00009%%00009// Add the data from the input port to the knimeTable.%%00010%%00009%%00009var port0dataTable = _representation.inObjects[0].table;%%00010%%00009%%00009port0dataTable.rows = sortByClusterName(port0dataTable.rows);%%00010%%00009%%00009knimeTable.setDataTable(port0dataTable);%%00010%%00009%%00009%%00010%%00009%%00009processData(true);%%00009%%00010%%00009%%00009setColorRange();%%00010%%00009%%00009%%00010%%00009%%00009// Create the SVG object%%00010%%00009%%00009var svg1 = document%%00010%%00009%%00009%%00009%%00009.createElementNS('http://www.w3.org/2000/svg', 'svg');%%00010%%00009%%00009div[0][0].appendChild(svg1);%%00010%%00010%%00009%%00009svg = d3.select(&quot;svg&quot;)%%00010%%00009%%00009%%00009.style(&quot;display&quot;, &quot;block&quot;);%%00010%%00010%%00009%%00009if (!optFullscreen) {%%00010%%00009%%00009%%00009if (optWidth &gt; 0) {%%00010%%00009%%00009%%00009%%00009div.style(&quot;width&quot;, optWidth + &quot;px&quot;)%%00010%%00009%%00009%%00009%%00009svg.attr(&quot;width&quot;, optWidth);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009if (optHeight &gt; 0) {%%00010%%00009%%00009%%00009%%00009svg.attr(&quot;height&quot;, optHeight);%%00010%%00009%%00009%%00009%%00009div.style(&quot;height&quot;, optHeight + &quot;px&quot;);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009// Set full screen height/width%%00010%%00009%%00009%%00009div.style(&quot;width&quot;, &quot;100%&quot;);%%00010%%00009%%00009%%00009div.style(&quot;height&quot;, height);%%00010%%00010%%00009%%00009%%00009svg.attr(&quot;width&quot;, &quot;100%&quot;);%%00010%%00009%%00009%%00009svg.attr(&quot;height&quot;, &quot;100%&quot;);%%00010%%00009%%00009}%%00010%%00009%%00010%%00009%%00009// Pie chart%%00010%%00009%%00009nv.addGraph(function() {%%00010%%00009%%00009%%00009chart = nv.models.pieChart()%%00010%%00009%%00009%%00009%%00009.x(function(d) { return d.label })%%00010%%00009%%00009%%00009%%00009.y(function(d) { return d.value })%%00010%%00009%%00009%%00009%%00009.color(colorRange)%%00010%%00009%%00009%%00009%%00009.duration(0)%%00010%%00009%%00009%%00009%%00009.showLegend(showLegend)%%00010%%00009%%00009%%00009%%00009.showLabels(showLabels)%%00010%%00009%%00009%%00009%%00009.labelThreshold(labelThreshold) %%00010%%00009%%00009%%00009%%00009.labelType(labelType); // &quot;key&quot;, &quot;value&quot; or &quot;percent&quot;%%00010%%00010%%00009%%00009%%00009chart.dispatch.on('renderEnd.css', function() {%%00010%%00009%%00009%%00009%%00009setCssClasses();%%00010%%00009%%00009%%00009%%00009redrawSelection();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009// tooltip is re-created every time therefore we need to assign classes accordingly%%00010%%00009%%00009%%00009chart.pie.dispatch.on('elementMouseover.tooltipCss', setTooltipCssClasses);%%00010%%00009%%00009%%00009chart.pie.dispatch.on('elementMousemove.tooltipCss', setTooltipCssClasses);%%00010%%00009%%00009%%00009chart.pie.dispatch.on('elementMouseout.tooltipCss', hideTooltips);%%00010%%00010%%00009%%00009%%00009chart.legend.dispatch.on('legendClick', function(series, index) {%%00010            %%00009//drawChart(true);%%00010            %%00009removeHilightBar(&quot;&quot;,true);%%00010            %%00009d3.event.stopPropagation();%%00010            });%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009chart.width(optFullscreen ? &quot;100%&quot; : optWidth);%%00010%%00009%%00009%%00009chart.height(optFullscreen ? &quot;100%&quot; : optHeight);%%00010%%00009%%00009%%00009chart.margin({top: 0, bottom: 0, left: 20, right: 0});%%00010%%00010%%00009%%00009%%00009// TODO: Add a mechanism to remember the categories that are%%00010%%00009%%00009%%00009// switched on.%%00010%%00010%%00009%%00009%%00009chart.donut(optDonutChart);%%00010%%00009%%00009%%00009chart.donutRatio(holeSize);%%00010%%00009%%00009%%00009if (optInsideTitle) {%%00010%%00009%%00009%%00009%%00009chart.title(optInsideTitle);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009updateTitles(false);%%00010%%00010%%00009%%00009%%00009// checking if all the pies are 0s%%00010%%00009%%00009%%00009if (plotData.filter(function(d) { return d.value !== 0 }).length === 0) {%%00010%%00009%%00009%%00009%%00009svg.append('text')%%00010%%00009%%00009%%00009%%00009%%00009.attr('x', 20)%%00010%%00009%%00009%%00009%%00009%%00009.attr('y', 80)%%00010%%00009%%00009%%00009%%00009%%00009.attr('font-size', 20)%%00010%%00009%%00009%%00009%%00009%%00009.attr('fill', 'red')%%00010%%00009%%00009%%00009%%00009%%00009.text('The plot is empty because all values are equal to 0.');%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009svg.datum(plotData).transition().duration(0).call(chart);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009//nv.utils.windowResize(chart.update);%%00010%%00009%%00009%%00009nv.utils.windowResize(function () { %%00010%%00009%%00009%%00009%%00009chart.update(); %%00010%%00009%%00009%%00009%%00009removeHilightBar(&quot;&quot;,true); %%00010%%00009%%00009%%00009%%00009redrawSelection();%%00010%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009if(optEnableSelection) {%%00010%%00009%%00009%%00009%%00009svg.on(&quot;click&quot;, function() {%%00010%%00009%%00009%%00009%%00009%%00009removeHilightBar(&quot;&quot;,true);%%00010%%00009%%00009%%00009%%00009_value.options['selection'] = [];%%00010%%00009%%00009%%00009%%00009publishSelection(true);%%00010%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009// redraws selection%%00010            redrawSelection();%%00010%%00010%%00009%%00009%%00009return chart;%%00010%%00009%%00009});%%00010%%00009}%%00010%%00009%%00010    function sortByClusterName(array) {%%00010        return array.sort(function(a, b) {%%00010            var x = a.data[0];%%00010            var y = b.data[0];%%00010            %%00010            // Make sure, that missing values are displayed last%%00010            if(x == null) {%%00010            %%00009return 1%%00010            } else if (y == null) {%%00010            %%00009return -1;%%00010            }%%00010            %%00010            if (typeof x == &quot;string&quot;)%%00010            {%%00010                x = (&quot;&quot;+x).toLowerCase(); %%00010            }%%00010            if (typeof y == &quot;string&quot;)%%00010            {%%00010                y = (&quot;&quot;+y).toLowerCase();%%00010            }%%00010            return ((x &lt; y) ? -1 : ((x &gt; y) ? 1 : 0));%%00010        });%%00010    }%%00010%%00009%%00010    function registerClickHandler () {%%00010        d3.selectAll(&quot;.nv-slice&quot;).on('click',function(event) {%%00010            handleHighlightClick(event);%%00010            d3.event.stopPropagation();%%00010        });%%00010    }%%00010%%00010    function redrawSelection() {%%00010        var length = _value.options['selection'] ? _value.options['selection'].length : 0;%%00010        for (var i = 0; i &lt; length; i++) {%%00010            createHilightBar(_keyNameMap.getNameFromKey(_value.options['selection'][i][0]), %%00010                _value.options['selection'][i][1]);%%00010        }%%00010    }%%00010%%00010    function subscribeToSelection(subscribeBool) {%%00010        if(_representation.options.enableSelection) {%%00010            if(subscribeBool) {%%00010                knimeService.subscribeToSelection(_translator.sourceID, onSelectionChanged);%%00010            } else {%%00010                knimeService.unsubscribeSelection(_translator.sourceID, onSelectionChanged);%%00010            }%%00010        }%%00010    }%%00010%%00010    function publishSelection(shouldPublish){%%00010        if(shouldPublish) {%%00010            knimeService.setSelectedRows(_translator.sourceID, getSelectedRowIDs(), _translator.sourceID);%%00010        }%%00010    }%%00010%%00010    function checkClearSelectionButton(){%%00010        var button = d3.select(&quot;#clearSelectionButton&quot;);%%00010        if (button){%%00010            button.classed(&quot;inactive&quot;, function(){return !_value.options['selection'].length &gt; 0});%%00010        }%%00010    }%%00010%%00010    function getSelectedRowIDs() {%%00010        if(_value.options['selection']) {%%00010            var selectedRowIDs = [];%%00010            for (var i = 0; i&lt; _value.options['selection'].length; i++) {%%00010                selectedRowIDs.push( _value.options['selection'][i][0]);%%00010            }%%00010            return selectedRowIDs;%%00010        } else {%%00010            return [];%%00010        }%%00010    }%%00010%%00010    // Removes the clusterName with the given cluster name. If &quot;removeAll&quot; is true all bars are removed%%00010    function removeHilightBar(clusterName, removeAll) {%%00010        if (removeAll) {%%00010            var length = _value.options['selection'] ? _value.options['selection'].length : 0;%%00010            for (var i = 0; i &lt; length; i++) {%%00010                d3.selectAll(&quot;.hilightBar&quot;).remove();%%00010            }%%00010        } else {%%00010            var barIndex = getSelectedRowIDs().indexOf(_keyNameMap.getKeyFromName(clusterName));%%00010            if(barIndex &gt; -1) {%%00010                let pie = selectCorrectBar(clusterName);%%00010                if (pie){%%00010                    pie.remove();%%00010                }%%00010            }%%00010        }%%00010    } %%00010%%00010    function selectCorrectBar(clusterName) {%%00010        let allSlices = d3.selectAll(&quot;.nv-slice&quot;);%%00010        for(var j = 0; j &lt; allSlices[0].length; j++) {%%00010            if(d3.select(allSlices[0][j]).data()[0].data.label == clusterName) {%%00010                return d3.select(allSlices[0][j]).select(&quot;.hilightBar&quot;);%%00010            }%%00010        }%%00010    }%%00010%%00010    // Create a hilight-bar above the cluster with the given name and assigns the given css class to it%%00010    function createHilightBar (clusterName, selectionClass) {%%00010        for(var j = 0; j &lt; plotData.length; j++) {%%00010            if(plotData[j].label === clusterName) {%%00010                var slices = d3.selectAll(&quot;.nv-slice&quot;);%%00010                for(var i = 0; i &lt; slices[0].length; i++) {%%00010                    if(i==j) {%%00010                        var slice = d3.select(slices[0][i]).select(&quot;path&quot;);%%00010                        var availableWidth = chart.width() - 20;%%00010                        var availableHeight = chart.height();%%00010                        var radius = Math.min(availableWidth, availableHeight) / 2;%%00010                        var selectionTitle;%%00010                        if(selectionClass == &quot;knime-selected&quot;) {%%00010                            selectionTitle = &quot;Selected&quot;;%%00010                        } else {%%00010                            selectionTitle = &quot;Partially selected&quot;;%%00010                        }%%00010                        //PieChart Code%%00010                        var arc = d3.svg.arc()%%00010                        .innerRadius((radius - radius / 5))%%00010                        .outerRadius((radius - radius / 5)+8)%%00010                        .startAngle(slice.data()[0].startAngle) //converting from degs to radians%%00010                        .endAngle(slice.data()[0].endAngle); //just radians%%00010%%00010                        slice.select(function() { return this.parentNode; }).append(&quot;path&quot;)%%00010                        .attr(&quot;d&quot;, arc)%%00010                        .classed(&quot;hilightBar&quot;,true)%%00010                        .classed(selectionClass, true)%%00010                        .append(&quot;title&quot;)%%00010                        .classed('knime-tooltip', true)%%00010                        .text(selectionTitle);%%00010                    } %%00010                }%%00010            }%%00010        }%%00010    }%%00010%%00010    function getClusterToRowMapping() {%%00010        var map = {};%%00010        for (var i = 0; i &lt; _incomingTable.rows.length; i++) {%%00010            if(_incomingTable.rows[i].data[0]) {%%00010                map[_incomingTable.rows[i].data[0]] = _incomingTable.rows[i].rowKey;%%00010            } else {%%00010                map[&quot;Missing values&quot;] = _incomingTable.rows[i].rowKey;%%00010            }%%00010        }%%00010        return map;%%00010    }%%00010%%00010    // Helper class to handle conversion from cluster name to row key%%00010    function KeyNameMap(map) {%%00010        this.map = map;%%00010        this.reverseMap = {};%%00010        for(var key in map){%%00010            var value = map[key];%%00010            this.reverseMap[value] = key;   %%00010        }%%00010    }%%00010%%00010    KeyNameMap.prototype.getKeyFromName = function(name){ %%00010        return this.map[name]; %%00010    }%%00010    KeyNameMap.prototype.getNameFromKey = function(key){%%00010        return this.reverseMap[key];%%00010    }%%00010%%00010    function handleHighlightClick(event) {%%00010        if(!_value.options['selection']) {%%00010            _value.options['selection'] = [];%%00010        }%%00010        var clusterName = event.data.label;%%00010        var clusterKey = _keyNameMap.getKeyFromName(clusterName);%%00010        var barIndex = getSelectedRowIDs().indexOf(clusterKey);%%00010        // Deselect already selected bar when clicking again on it%%00010        if(barIndex &gt; -1 &amp;&amp; (d3.event.ctrlKey || d3.event.shiftKey || d3.event.metaKey)){%%00010            if(_representation.options.enableSelection) {%%00010                if(_value.options.publishSelection) {%%00010                    knimeService.removeRowsFromSelection(_translator.sourceID,[clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            removeHilightBar(clusterName, false);%%00010            _value.options['selection'].splice(barIndex, 1);%%00010        } else if(!d3.event.ctrlKey &amp;&amp; !d3.event.shiftKey &amp;&amp; !d3.event.metaKey) {%%00010            // Deselect all previously selected bars and select the newly clicked one%%00010            if(_representation.options.enableSelection) {%%00010                if(_value.options.publishSelection) {%%00010                    knimeService.setSelectedRows(_translator.sourceID,[clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            removeHilightBar(clusterName, true);%%00010            _value.options['selection']= [];%%00010            createHilightBar(clusterName, &quot;knime-selected&quot;);%%00010            _value.options['selection'].push([clusterKey, &quot;knime-selected&quot;]);%%00010        } else {%%00010            // Select the clicked bar, as it is either a new selection or a additional selection%%00010            if(_representation.options.enableSelection) {%%00010                if(_value.options.publishSelection) {%%00010                    knimeService.addRowsToSelection(_translator.sourceID,[clusterKey], _translator.sourceID);%%00010                }%%00010            }%%00010            createHilightBar(clusterName, &quot;knime-selected&quot;);%%00010            _value.options['selection'].push([clusterKey, &quot;knime-selected&quot;]);%%00010        }%%00010        checkClearSelectionButton();%%00010    }%%00010%%00010    function onSelectionChanged(data) {%%00010        if(!_value.options['selection']) {%%00010            _value.options['selection'] = [];%%00010        }%%00010        if (data.reevaluate) {%%00010            removeHilightBar(&quot;&quot;, true);%%00010            var selectedRows = knimeService.getAllRowsForSelection(_translator.sourceID);%%00010            var partiallySelectedRows = knimeService.getAllPartiallySelectedRows(_translator.sourceID);%%00010            _value.options['selection'] = [];%%00010            for (let selectedRow in selectedRows) {%%00010                let length = _value.options['selection'].length;%%00010                _value.options['selection'][length] = [selectedRows[selectedRow], &quot;knime-selected&quot;];%%00010                createHilightBar(_keyNameMap.getNameFromKey(selectedRows[selectedRow]),%%00010                &quot;knime-selected&quot;);%%00010            }%%00010            for (let partiallySelectedRow in partiallySelectedRows) {%%00010                let length = _value.options['selection'].length;%%00010                _value.options['selection'][length] = [partiallySelectedRows[partiallySelectedRow], &quot;knime-partially-selected&quot;];%%00010                createHilightBar(_keyNameMap.getNameFromKey(partiallySelectedRows[partiallySelectedRow]),%%00010                &quot;knime-partially-selected&quot;);%%00010            }%%00010        } else if (data.changeSet) {%%00010            if (data.changeSet.removed) {%%00010                data.changeSet.removed.map(function(rowId) {%%00010                    var clusterName = rowId;%%00010                    var index = getSelectedRowIDs().indexOf(clusterName);%%00010                    if (index &gt; -1) {%%00010                        removeHilightBar(_keyNameMap.getNameFromKey(rowId), false);%%00010                        _value.options['selection'].splice(index, 1);%%00010                    }%%00010                });%%00010            }%%00010            if(data.changeSet.partialRemoved) {%%00010                data.changeSet.partialRemoved.map(function(rowId) {%%00010                    var clusterName = rowId;%%00010                    var index = getSelectedRowIDs().indexOf(clusterName);%%00010                    if (index &gt; -1) {%%00010                        removeHilightBar(_keyNameMap.getNameFromKey(rowId), false);%%00010                        _value.options['selection'].splice(index, 1);%%00010                    }%%00010                });%%00010            }%%00010            if (data.changeSet.added) {%%00010                data.changeSet.added.map(function(rowId) {%%00010                    var index = getSelectedRowIDs().indexOf(rowId);%%00010                    if (index === -1) {%%00010                        _value.options['selection'].push([rowId, &quot;knime-selected&quot;]);%%00010                        createHilightBar(_keyNameMap.getNameFromKey(rowId), &quot;knime-selected&quot;);%%00010                    }%%00010                });%%00010            }%%00010            if(data.changeSet.partialAdded) {%%00010                data.changeSet.partialAdded.map(function(rowId) {%%00010                    var index = getSelectedRowIDs().indexOf(rowId);%%00010                    if (index === -1) {%%00010                        _value.options['selection'].push([rowId, &quot;knime-partially-selected&quot;]);%%00010                        createHilightBar(_keyNameMap.getNameFromKey(rowId), &quot;knime-partially-selected&quot;);%%00010                    }%%00010                });%%00010            }%%00010        }%%00010        checkClearSelectionButton();%%00010    }%%00010%%00010%%00009%%00010%%00009function updateData(updateChart) {%%00010%%00009%%00009processData();%%00010%%00009%%00009if (updateChart) {%%00010%%00009%%00009%%00009chart.update();%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009%%00010%%00009function updateTitles(updateChart) {%%00010%%00009%%00009if (chart) {%%00010%%00009%%00009%%00009var curTitle = d3.select(&quot;#title&quot;);%%00010%%00009%%00009%%00009var curSubtitle = d3.select(&quot;#subtitle&quot;);%%00010%%00009%%00009%%00009var chartNeedsUpdating = curTitle.empty() != !(_value.options.title) %%00010%%00009%%00009%%00009%%00009|| curSubtitle.empty() != !(_value.options.subtitle);%%00010%%00009%%00009%%00009if (!_value.options.title) {%%00010%%00009%%00009%%00009%%00009curTitle.remove();%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009if (_value.options.title) {%%00010%%00009%%00009%%00009%%00009if (curTitle.empty()) {%%00010%%00009%%00009%%00009%%00009%%00009svg.append(&quot;text&quot;)%%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr(&quot;x&quot;, 20)             %%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr(&quot;y&quot;, 30)%%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;title&quot;)%%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr('class', 'knime-title')%%00010%%00009%%00009%%00009%%00009%%00009%%00009.text(_value.options.title);%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009curTitle.text(_value.options.title);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009if (!_value.options.subtitle) {%%00010%%00009%%00009%%00009%%00009curSubtitle.remove();%%00010%%00009%%00009%%00009} %%00010%%00009%%00009%%00009if (_value.options.subtitle) {%%00010%%00009%%00009%%00009%%00009if (curSubtitle.empty()) {%%00010%%00009%%00009%%00009%%00009%%00009svg.append(&quot;text&quot;)%%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr(&quot;x&quot;, 20)             %%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr(&quot;y&quot;, _value.options.title ? 46 : 20)%%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr(&quot;id&quot;, &quot;subtitle&quot;)%%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr('class', 'knime-subtitle')%%00010%%00009%%00009%%00009%%00009%%00009%%00009.text(_value.options.subtitle);%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009curSubtitle.text(_value.options.subtitle)%%00010%%00009%%00009%%00009%%00009%%00009%%00009.attr(&quot;y&quot;, _value.options.title ? 46 : 20);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009var topMargin = 10;%%00010%%00009%%00009%%00009topMargin += _value.options.title ? 10 : 0;%%00010%%00009%%00009%%00009topMargin += _value.options.subtitle ? 8 : 0;%%00010%%00009%%00009%%00009chart.legend.margin({top: topMargin, bottom: topMargin});%%00010%%00009%%00009%%00009chart.margin({top: topMargin, bottom: topMargin});%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009var isTitle = _value.options.title || _value.options.subtitle;%%00010%%00009%%00009%%00009knimeService.floatingHeader(isTitle);%%00009%%00009%%00009%%00010%%00009%%00009%%00010%%00009%%00009%%00009%%00010%%00009%%00009%%00009if (updateChart &amp;&amp; chartNeedsUpdating) {%%00010%%00009%%00009%%00009%%00009if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView ) {%%00010%%00009%%00009%%00009%%00009%%00009var height = (isTitle) ? &quot;100%&quot; : &quot;calc(100% - &quot; + knimeService.headerHeight() + &quot;px)&quot;;%%00010%%00009%%00009%%00009%%00009%%00009layoutContainer.style(&quot;height&quot;, height)%%00010%%00009%%00009%%00009%%00009%%00009%%00009// two rows below force to invalidate the container which solves a weird problem with vertical scroll bar in IE%%00010%%00009%%00009%%00009%%00009%%00009%%00009.style('display', 'none')%%00010%%00009%%00009%%00009%%00009%%00009%%00009.style('display', 'block');%%00010%%00009%%00009%%00009%%00009%%00009d3.select(&quot;#svgContainer&quot;).style(&quot;height&quot;, height); %%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009chart.update();%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009%%00010%%00009processData = function(setColorRange) {%%00010%%00009%%00009var optMethod = _representation.options[&quot;aggr&quot;];%%00010%%00009%%00009var optCat = _representation.options[&quot;cat&quot;];%%00010%%00009%%00009var optFreqCol = _value.options[&quot;freq&quot;];%%00010%%00009%%00009%%00010%%00009%%00009var categories = knimeTable.getColumn(optCat);%%00010%%00009%%00009%%00010%%00009%%00009var valCol;%%00010%%00009%%00009if (optMethod == &quot;Occurence\u00A0Count&quot;) {%%00010%%00009%%00009%%00009valCol = knimeTable.getColumn(1);%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009valCol = knimeTable.getColumn(optFreqCol);%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009plotData = [];%%00010%%00009%%00009excludeCat = [];%%00010%%00009%%00009missValCatValue = undefined;%%00010%%00009%%00009if (valCol.length &gt; 0) {%%00010%%00009%%00009%%00009var numDataPoints = valCol.length;%%00010%%00009%%00009%%00009for (var i = 0; i &lt; numDataPoints; i++) {%%00010%%00009%%00009%%00009%%00009var label = categories[i];%%00010%%00009%%00009%%00009%%00009var value = valCol[i];%%00010%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009if (label === null) {%%00010%%00009%%00009%%00009%%00009%%00009// missing values category%%00009%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009%%00009// save the value to append as the last item%%00009%%00009%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009%%00009missValCatValue = value;%%00009%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009%%00009continue;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009if (value === null) {%%00010%%00009%%00009%%00009%%00009%%00009// category has only missing values - exclude it%%00010%%00009%%00009%%00009%%00009%%00009excludeCat.push(label);%%00009%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009%%00009continue;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009var plotStream = {%%00010%%00009%%00009%%00009%%00009%%00009&quot;label&quot; : label,%%00010%%00009%%00009%%00009%%00009%%00009&quot;value&quot; : Math.abs(value)  // take abs value to prevent a damaged plot%%00010%%00009%%00009%%00009%%00009};%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009plotData.push(plotStream);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009processMissingValues(false);%%00010%%00009}%%00010%%00009%%00010%%00009setColorRange = function() {%%00010%%00009%%00009var numCat = plotData.length;%%00010%%00009%%00009if (missValCatValue !== undefined &amp;&amp; missValCatValue !== null) {%%00010%%00009%%00009%%00009// We don't want the option &quot;includeMissValCat&quot; to influence on the number of categories,%%00010%%00009%%00009%%00009// because the option can be changed in the view and the color scale then can also be changed (if a border case) - and we don't want this.%%00010%%00009%%00009%%00009// Hence, only the real value matters.%%00010%%00009%%00009%%00009numCat++;%%00010%%00009%%00009}%%00010%%00009%%00009if (_representation.options.customColors) {%%00010%%00009%%00009%%00009colorRange = [];%%00010%%00009%%00009%%00009for (var i = 0; i &lt; numCat; i++) {%%00010%%00009%%00009%%00009%%00009var color = knimeTable.getRowColors()[i];%%00010%%00009%%00009%%00009%%00009if (!color) {%%00010%%00009%%00009%%00009%%00009%%00009color = &quot;#7C7C7C&quot;;%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009colorRange.push(color);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009var colorScale;%%00010%%00009%%00009%%00009if (numCat &gt; 10) {%%00010%%00009%%00009%%00009%%00009colorScale = d3.scale.category20();%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009colorScale = d3.scale.category10();%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009colorRange = colorScale.range();%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009%%00010%%00009/**%%00010%%00009 * switched - if the chart update was triggered by changing the &quot;include 'Missing values' category&quot; option in the view%%00010%%00009 */%%00010%%00009processMissingValues = function(switched) {%%00010%%00009%%00009// Missing values post-processing%%00009%%00010%%00009%%00009if (missValCatValue !== undefined) {  // undefined means there's no missing value in the category column at all%%00010%%00009%%00009%%00009if (_value.options.includeMissValCat &amp;&amp; _representation.options.reportOnMissingValues) {%%00010%%00009%%00009%%00009%%00009// add missing values category%%00010%%00009%%00009%%00009%%00009var label = &quot;Missing values&quot;;%%00010%%00009%%00009%%00009%%00009if (missValCatValue !== null) {%%00010%%00009%%00009%%00009%%00009%%00009plotData.push({&quot;label&quot;: label, &quot;value&quot;: missValCatValue});%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009excludeCat.push(label);%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009} else if (switched) {%%00010%%00009%%00009%%00009%%00009// remove missing values category, but only if we have triggered switch from the view%%00010%%00009%%00009%%00009%%00009// otherwise there's nothing to remove yet%%00010%%00009%%00009%%00009%%00009if (missValCatValue !== null) {%%00010%%00009%%00009%%00009%%00009%%00009plotData.pop();%%00010%%00009%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009%%00009excludeCat.pop();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010%%00009%%00009}%%00010%%00010%%00009%%00009// Set warning messages%%00010%%00009%%00009if (!showWarnings) {%%00010%%00009%%00009%%00009return;%%00010%%00009%%00009}%%00010%%00009%%00009if (plotData.length == 0) {%%00010%%00009%%00009%%00009// No data available warnings%%00010%%00009%%00009%%00009var str;%%00010%%00009%%00009%%00009if (missValCatValue !== undefined &amp;&amp; missValCatValue !== null &amp;&amp; _representation.options.reportOnMissingValues) {%%00010%%00009%%00009%%00009%%00009str = &quot;No chart was generated since the frequency column has only missing values.\nThere are values where the category name is missing.\nTo see them switch on the option \&quot;Include 'Missing values' category\&quot; in the view settings.&quot;;%%00010%%00009%%00009%%00009} else {%%00010%%00009%%00009%%00009%%00009str = &quot;No chart was generated since the frequency column has only missing values or empty.\nRe-run the workflow with different data.&quot;;%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009knimeService.setWarningMessage(str, NO_DATA_AVAILABLE);%%00010%%00009%%00009} else if (excludeCat.length &gt; 0 &amp;&amp; _representation.options.reportOnMissingValues) {%%00010%%00009%%00009%%00009knimeService.setWarningMessage(&quot;Categories '&quot; + excludeCat.join(&quot;', '&quot;) + &quot;' have only missing values in the frequency column and were excluded from the view.&quot;, MISSING_VALUES_ONLY)%%00010%%00009%%00009} else {%%00010%%00009%%00009%%00009knimeService.clearWarningMessage(MISSING_VALUES_ONLY);%%00010%%00009%%00009}%%00009%%00010%%00009}%%00010%%00009%%00009%%00010%%00009drawControls = function() {%%00009%%00009%%00010%%00009%%00009if (!knimeService) {%%00010%%00009%%00009%%00009return;%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009if (_representation.options.displayFullscreenButton) {%%00010%%00009%%00009%%00009knimeService.allowFullscreen();%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009    if (!_representation.options.enableViewControls) return;%%00010%%00009    %%00010%%00009    var titleEdit = _representation.options.enableTitleEdit;%%00010%%00009%%00009var subtitleEdit = _representation.options.enableSubtitleEdit;%%00010%%00009%%00009var donutToggle = _representation.options.enableDonutToggle;%%00010%%00009%%00009var holeEdit = _representation.options.enableHoleEdit;%%00010%%00009%%00009//var insideTitleEdit = _representation.options.enableInsideTitleEdit;%%00010%%00009%%00009//var colChooser = _representation.options.enableColumnChooser;%%00010%%00009%%00009var labelEdit = _representation.options.enableLabelEdit;%%00010%%00009%%00009var switchMissValCat = _representation.options.enableSwitchMissValCat;%%00010%%00009%%00009var enableSelection = _representation.options.enableSelection;%%00010%%00009%%00009var displayClearButton = _representation.options.displayClearSelectionButton;%%00010%%00009    %%00010%%00009    if (titleEdit || subtitleEdit) {%%00009    %%00009    %%00010%%00009    %%00009if (titleEdit) {%%00010%%00009    %%00009%%00009var chartTitleText = knimeService.createMenuTextField('chartTitleText', _value.options.title, function() {%%00010%%00009    %%00009%%00009%%00009if (_value.options.title != this.value) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.title = this.value;%%00010%%00009%%00009%%00009%%00009%%00009%%00009updateTitles(true);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009    %%00009%%00009}, true);%%00010%%00009    %%00009%%00009knimeService.addMenuItem('Chart Title:', 'header', chartTitleText);%%00010%%00009    %%00009}%%00010%%00009    %%00009if (subtitleEdit) {%%00010%%00009    %%00009%%00009var chartSubtitleText = knimeService.createMenuTextField('chartSubtitleText', _value.options.subtitle, function() {%%00010%%00009    %%00009%%00009%%00009if (_value.options.subtitle != this.value) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.subtitle = this.value;%%00010%%00009%%00009%%00009%%00009%%00009%%00009updateTitles(true);%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009    %%00009%%00009}, true);%%00010%%00009    %%00009%%00009var mi = knimeService.addMenuItem('Chart Subtitle:', 'header', chartSubtitleText, null, knimeService.SMALL_ICON);%%00010%%00009    %%00009}%%00009%%00010%%00009    %%00009if (/*colChooser ||*/ labelEdit || donutToggle || holeEdit /*|| insideTitleEdit*/) {%%00010%%00009    %%00009%%00009knimeService.addMenuDivider();%%00010%%00009    %%00009}%%00010%%00009    }%%00010%%00009    %%00010%%00009    /*if (colChooser) {%%00010%%00009    %%00009// filter out non number columns%%00010%%00009    %%00009var colNames = _representation.inObjects[0].spec.colNames;%%00010%%00009%%00009%%00009var colTypes = _representation.inObjects[0].spec.colTypes;%%00010%%00009%%00009%%00009var numberColumns = [];%%00010%%00009%%00009%%00009for (var i = 0; i &lt; colNames.length; i++) {%%00010%%00009%%00009%%00009%%00009if (colTypes[i] == &quot;number&quot;) {%%00010%%00009%%00009%%00009%%00009%%00009numberColumns.push(colNames[i]);%%00009%%00009%%00009%%00009%%00009%%00010%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009}%%00010    %%00009%%00009var colSelect = knimeService.createMenuSelect('columnSelect', _value.options.freq, numberColumns, function() {%%00010    %%00009%%00009%%00009_value.options.freq = this.value;%%00010%%00009%%00009%%00009%%00009updateData(true);%%00010    %%00009%%00009});%%00010    %%00009%%00009knimeService.addMenuItem('Column:', 'minus-square fa-rotate-90', colSelect);%%00010    %%00009%%00009%%00010    %%00009%%00009if (labelEdit || donutToggle || holeEdit || insideTitleEdit) {%%00010%%00009    %%00009%%00009knimeService.addMenuDivider();%%00010%%00009    %%00009}%%00010        }*/%%00010%%00009    %%00010%%00009    if (labelEdit) {%%00010%%00009    %%00009var labelCbx = knimeService.createMenuCheckbox('labelCbx', _value.options.showLabels, function () {%%00010%%00009    %%00009%%00009if (_value.options.showLabels != this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009_value.options.showLabels = this.checked;%%00010%%00009%%00009%%00009%%00009%%00009chart.showLabels(this.checked);%%00010%%00009%%00009%%00009%%00009%%00009d3.selectAll(&quot;#labelType input&quot;).property(&quot;disabled&quot;, !_value.options.showLabels);%%00010%%00009%%00009%%00009%%00009%%00009//workaround for nvd3 bug, remove labels manually%%00010%%00009%%00009%%00009%%00009%%00009if (!this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009d3.selectAll(&quot;.nv-pieLabels *&quot;).remove();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009%%00009%%00009%%00009chart.update();%%00010%%00009%%00009%%00009%%00009}%%00010%%00009    %%00009});%%00010%%00009    %%00009knimeService.addMenuItem('Show labels:', 'comment-o', labelCbx);%%00010%%00009    %%00009%%00010%%00009    %%00009var labelTypeRadio = knimeService.createInlineMenuRadioButtons('labelType', 'labelType', 'Value', ['Key', 'Value', 'Percent'], function() {%%00010%%00009    %%00009%%00009_value.options.labelType = this.value;%%00010%%00009%%00009%%00009%%00009chart.labelType(this.value.toLowerCase());%%00010%%00009%%00009%%00009%%00009chart.update();%%00010%%00009    %%00009});%%00010%%00009    %%00009knimeService.addMenuItem('Label type:', 'commenting-o', labelTypeRadio);%%00010%%00009    %%00009%%00010%%00009%%00009    if (switchMissValCat || donutToggle || holeEdit || insideTitleEdit) {%%00010%%00009    %%00009%%00009knimeService.addMenuDivider();%%00010%%00009    %%00009}%%00010%%00009    }%%00010%%00009    %%00010%%00009    if (switchMissValCat &amp;&amp; missValCatValue !== undefined &amp;&amp; _representation.options.reportOnMissingValues) {%%00010%%00009    %%00009var switchMissValCatCbx = knimeService.createMenuCheckbox('switchMissValCatCbx', _value.options.includeMissValCat, function() {%%00010%%00009    %%00009%%00009if (_value.options.includeMissValCat != this.checked) {%%00010%%00009    %%00009%%00009%%00009_value.options.includeMissValCat = this.checked;%%00010%%00009    %%00009%%00009%%00009processMissingValues(true);%%00010%%00009    %%00009%%00009%%00009chart.update();%%00010%%00009    %%00009%%00009}%%00010%%00009    %%00009});%%00010%%00009    %%00009knimeService.addMenuItem(&quot;Include 'Missing values' category: &quot;, 'question', switchMissValCatCbx);%%00010%%00009    %%00009%%00010%%00009    %%00009if (donutToggle || holeEdit || insideTitleEdit) {%%00010%%00009    %%00009%%00009knimeService.addMenuDivider();%%00010%%00009    %%00009}%%00010%%00009    }%%00010%%00009    %%00010%%00009    if (donutToggle || holeEdit /*|| insideTitleEdit*/) {%%00010%%00009    %%00009if (donutToggle) {%%00010%%00009%%00009    %%00009var donutCbx = knimeService.createMenuCheckbox('donutCbx', _value.options.togglePie, function () {%%00010%%00009%%00009    %%00009%%00009if (_value.options.togglePie != this.checked) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.togglePie = this.checked;%%00010%%00009%%00009%%00009%%00009%%00009%%00009chart.donut(this.checked);%%00010%%00009%%00009%%00009%%00009%%00009%%00009d3.selectAll(&quot;#insideTitleText, #holeRatioText&quot;).property(&quot;disabled&quot;, !_value.options.togglePie);%%00010%%00009%%00009%%00009%%00009%%00009%%00009chart.update();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009%%00009    %%00009});%%00010%%00009%%00009    %%00009knimeService.addMenuItem('Render donut chart:', knimeService.createStackedIcon('gear', 'circle-o'), donutCbx);%%00010%%00009    %%00009}%%00010%%00009    %%00009%%00010%%00009    %%00009if (holeEdit) {%%00010%%00009    %%00009%%00009var holeRatioText = knimeService.createMenuTextField('holeRatioText', _value.options.holeSize, function() {%%00010%%00009    %%00009%%00009%%00009if (this.value &lt; 0) {%%00010    %%00009%%00009%%00009%%00009%%00009this.value = 0;%%00010    %%00009%%00009%%00009%%00009} else if (this.value &gt; 1) {%%00010    %%00009%%00009%%00009%%00009%%00009this.value = 1;%%00010    %%00009%%00009%%00009%%00009}%%00010    %%00009%%00009%%00009%%00009chart.donutRatio(this.value);%%00010    %%00009%%00009%%00009%%00009chart.update();%%00010%%00009    %%00009%%00009}, true);%%00010%%00009    %%00009%%00009holeRatioText.setAttribute(&quot;type&quot;, &quot;number&quot;);%%00010%%00009    %%00009%%00009holeRatioText.setAttribute(&quot;min&quot;, 0);%%00010%%00009    %%00009%%00009holeRatioText.setAttribute(&quot;max&quot;, 1);%%00010%%00009    %%00009%%00009holeRatioText.setAttribute(&quot;step&quot;, 0.1);%%00010%%00009    %%00009%%00009holeRatioText.disabled = !_value.options.togglePie;%%00010%%00009    %%00009%%00009knimeService.addMenuItem('Donut hole ratio:', 'adjust', holeRatioText);%%00010%%00009    %%00009}%%00010%%00009    %%00009%%00010%%00009    %%00009/*if (insideTitleEdit) {%%00010%%00009    %%00009%%00009var insideTitleText = knimeService.createMenuTextField('insideTitleText', _value.options.insideTitle, function() {%%00010%%00009    %%00009%%00009%%00009if (_value.options.insideTitle != this.value) {%%00010%%00009%%00009%%00009%%00009%%00009%%00009_value.options.insideTitle = this.value;%%00010%%00009%%00009%%00009%%00009%%00009%%00009chart.title(this.value);%%00010%%00009%%00009%%00009%%00009%%00009%%00009chart.update();%%00010%%00009%%00009%%00009%%00009%%00009}%%00010%%00009    %%00009%%00009}, true);%%00010%%00009    %%00009%%00009insideTitleText.disabled = !_value.options.togglePie;%%00010%%00009    %%00009%%00009knimeService.addMenuItem('Title inside:', 'header', insideTitleText, null, knimeService.SMALL_ICON);%%00010%%00009    %%00009}*/%%00010%%00009    %%00009%%00010%%00009        if (enableSelection) {%%00010%%00009        %%00009knimeService.addMenuDivider();%%00010%%00009        %%00009var subscribeToSelectionIcon = knimeService.createStackedIcon('check-square-o', 'angle-double-right', 'faded right sm', 'left bold');%%00010%%00009        %%00009var subscribeToSelectionMenu = knimeService.createMenuCheckbox('subscribeToSelection', %%00010%%00009        %%00009%%00009%%00009_value.options.subscribeToSelection, function () {%%00010%%00009        %%00009%%00009if (_value.options.subscribeToSelection != this.checked) {%%00010%%00009        %%00009%%00009%%00009_value.options.subscribeToSelection = this.checked;%%00010%%00009        %%00009%%00009%%00009subscribeToSelection(_value.options.subscribeToSelection);%%00010%%00009        %%00009%%00009}%%00010%%00009        %%00009});%%00010%%00009        %%00009knimeService.addMenuItem('Subscribe to selection:', subscribeToSelectionIcon, subscribeToSelectionMenu);%%00010%%00009        %%00009%%00010%%00009        %%00009var publishSelectionIcon = knimeService.createStackedIcon('check-square-o', 'angle-right', 'faded left sm', 'right bold');%%00010%%00009            var publishSelectionMenu = knimeService.createMenuCheckbox('publishSelection', _value.options.publishSelection,%%00010%%00009                function () {%%00010%%00009                    if (_value.options.publishSelection != this.checked) {%%00010%%00009                        _value.options.publishSelection = this.checked;%%00010%%00009                        publishSelection(this.checked);%%00010%%00009                    }%%00010%%00009                });%%00010%%00009            knimeService.addMenuItem('Publish selection:', publishSelectionIcon, publishSelectionMenu);%%00010%%00009        }%%00010%%00009        %%00010%%00009        if (displayClearButton &amp;&amp;  _representation.options.enableSelection) {%%00010%%00009%%00009%%00009%%00009knimeService.addButton(&quot;clearSelectionButton&quot;, &quot;minus-square-o&quot;, &quot;Clear selection&quot;, function(){%%00010%%00009%%00009%%00009%%00009%%00009d3.selectAll(&quot;.row&quot;).classed({&quot;selected&quot;: false, &quot;knime-selected&quot;: false, &quot;unselected&quot;: false });%%00010%%00009%%00009%%00009%%00009%%00009removeHilightBar(&quot;&quot;,true);%%00010%%00009%%00009%%00009%%00009%%00009_value.options['selection'] = [];%%00010%%00009%%00009%%00009%%00009%%00009publishSelection(true);%%00010%%00009%%00009%%00009%%00009});%%00010%%00009%%00009%%00009%%00009d3.select(&quot;#clearSelectionButton&quot;).classed(&quot;inactive&quot;, true);%%00010%%00009%%00009%%00009}%%00010    %%00009}%%00010%%00009};%%00010%%00010%%00009function setCssClasses() {%%00009%%00009%%00010%%00009%%00009d3.selectAll('.nv-label')%%00010%%00009%%00009%%00009.classed('knime-label', true);%%00010%%00010%%00009%%00009// legend%%00010%%00009%%00009d3.selectAll('.nv-legendWrap')%%00010%%00009%%00009%%00009.classed('knime-legend', true);%%00010%%00009%%00009d3.selectAll('.nv-legend-symbol')%%00010%%00009%%00009%%00009.classed('knime-legend-symbol', true);%%00010%%00009%%00009d3.selectAll('.nv-legend-text')%%00010%%00009%%00009%%00009.classed('knime-legend-label', true);%%00010%%00009%%00009if(_representation.options['enableSelection']) {%%00010%%00009%%00009%%00009registerClickHandler();%%00010%%00009%%00009}%%00010%%00009}%%00010%%00009%%00010%%00009function setTooltipCssClasses() {%%00010%%00009%%00009// tooltip%%00010%%00009%%00009var tooltip = d3.selectAll('.nvtooltip')%%00010%%00009%%00009.style('display', 'block')%%00010%%00009%%00009.classed('knime-tooltip', true);%%00010%%00009%%00009tooltip.selectAll('.x-value')%%00010%%00009%%00009.classed('knime-tooltip-caption', true)%%00010%%00009%%00009.classed('knime-x', true);%%00010%%00009%%00009tooltip.selectAll('.legend-color-guide')%%00010%%00009%%00009.classed('knime-tooltip-color', true);%%00010%%00009%%00009tooltip.selectAll('.key')%%00010%%00009%%00009.classed('knime-tooltip-key', true);%%00010%%00009%%00009tooltip.selectAll('.value')%%00010%%00009%%00009.classed('knime-tooltip-value', true);%%00010%%00009}%%00010%%00010    hideTooltips = function () {%%00010        d3.selectAll('.nvtooltip').style('display', 'none');%%00010    };%%00010%%00010%%00009pie.validate = function() {%%00010%%00009%%00009return true;%%00010%%00009}%%00010%%00010%%00009pie.getComponentValue = function() {%%00010%%00009%%00009return _value;%%00010%%00009}%%00010%%00010%%00009pie.getSVG = function() {%%00009%%00009%%00010%%00009%%00009// correct faulty rect elements%%00010%%00009%%00009d3.selectAll(&quot;rect&quot;).each(function() {%%00010%%00009%%00009%%00009var rect = d3.select(this);%%00010%%00009%%00009%%00009if (!rect.attr(&quot;width&quot;)) {%%00010%%00009%%00009%%00009%%00009rect.attr(&quot;width&quot;, 0);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009%%00009if (!rect.attr(&quot;height&quot;)) {%%00010%%00009%%00009%%00009%%00009rect.attr(&quot;height&quot;, 0);%%00010%%00009%%00009%%00009}%%00010%%00009%%00009});%%00010%%00009%%00009%%00010%%00009%%00009var svgElement = d3.select(&quot;svg&quot;)[0][0];%%00010%%00009%%00009knimeService.inlineSvgStyles(svgElement);%%00010%%00010%%00009%%00009// Return the SVG as a string.%%00010%%00009%%00009return (new XMLSerializer()).serializeToString(svgElement);%%00010%%00009}%%00010%%00010%%00009return pie;%%00010%%00010}());"/>
</config>
<config key="cssCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="text.knime-tick-label.knime-selected {%%00010%%00009font-weight: bold;%%00010}%%00010path.knime-selected {%%00010%%00009fill: orange;%%00010%%00009%%00010}%%00010path.knime-partially-selected {%%00010%%00009fill: grey;%%00010}%%00010text.knime-tick-label.knime-partially-selected {%%00010%%00009font-weight: bold;%%00010}%%00010%%00010path.nv-bar.positive {%%00010%%00009cursor:pointer;%%00010}"/>
</config>
<config key="jsDependencies">
<entry key="numSettings" type="xint" value="2"/>
<config key="dependency_0">
<entry key="name" type="xstring" value="nvd3"/>
<entry key="path" type="xstring" value="js-lib/nvd3/nv.d3.v1_8_1.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" value="nv"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="D3_3.5.5"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_1">
<entry key="name" type="xstring" value="D3_3.5.5"/>
<entry key="path" type="xstring" value="js-lib/d3/d3.v3_5_5.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
</config>
<config key="cssDependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="js-lib/nvd3/nv.d3.v1_8_1.min.css"/>
</config>
<entry key="new" type="xboolean" value="false"/>
<entry key="inView" type="xboolean" value="true"/>
<config key="tableIds">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="6a4c373d-6486-494c-8b8b-ffbaf684521c"/>
</config>
<config key="variables">
<entry key="numSettings" type="xint" value="1"/>
<entry key="mapClass" type="xstring" value="string"/>
<entry key="key_0" type="xstring" value="knime.workspace"/>
<entry key="class_0" type="xstring" value="java.lang.String"/>
<entry key="value_0" type="xstring" value="C:\Users\dimit\knime-workspace"/>
</config>
<config key="binaryFiles">
<entry key="numSettings" type="xint" value="0"/>
<entry key="mapClass" type="xstring" value="string"/>
</config>
<config key="options">
<entry key="numSettings" type="xint" value="21"/>
<entry key="mapClass" type="xstring" value="object"/>
<entry key="key_0" type="xstring" value="displayFullscreenButton"/>
<entry key="class_0" type="xstring" value="java.lang.Boolean"/>
<entry key="value_0" type="xboolean" value="true"/>
<entry key="key_1" type="xstring" value="displayClearSelectionButton"/>
<entry key="class_1" type="xstring" value="java.lang.Boolean"/>
<entry key="value_1" type="xboolean" value="true"/>
<entry key="key_2" type="xstring" value="enableHoleEdit"/>
<entry key="class_2" type="xstring" value="java.lang.Boolean"/>
<entry key="value_2" type="xboolean" value="true"/>
<entry key="key_3" type="xstring" value="svg"/>
<entry key="class_3" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
<config key="value_3">
<entry key="width" type="xint" value="600"/>
<entry key="height" type="xint" value="400"/>
<entry key="fullscreen" type="xboolean" value="true"/>
</config>
<entry key="key_4" type="xstring" value="legend"/>
<entry key="class_4" type="xstring" value="java.lang.Boolean"/>
<entry key="value_4" type="xboolean" value="true"/>
<entry key="key_5" type="xstring" value="enableInsideTitleEdit"/>
<entry key="class_5" type="xstring" value="java.lang.Boolean"/>
<entry key="value_5" type="xboolean" value="true"/>
<entry key="key_6" type="xstring" value="customColors"/>
<entry key="class_6" type="xstring" value="java.lang.Boolean"/>
<entry key="value_6" type="xboolean" value="false"/>
<entry key="key_7" type="xstring" value="enableTitleEdit"/>
<entry key="class_7" type="xstring" value="java.lang.Boolean"/>
<entry key="value_7" type="xboolean" value="true"/>
<entry key="key_8" type="xstring" value="enableSelection"/>
<entry key="class_8" type="xstring" value="java.lang.Boolean"/>
<entry key="value_8" type="xboolean" value="true"/>
<entry key="key_9" type="xstring" value="enableDonutToggle"/>
<entry key="class_9" type="xstring" value="java.lang.Boolean"/>
<entry key="value_9" type="xboolean" value="true"/>
<entry key="key_10" type="xstring" value="enableLabelEdit"/>
<entry key="class_10" type="xstring" value="java.lang.Boolean"/>
<entry key="value_10" type="xboolean" value="true"/>
<entry key="key_11" type="xstring" value="enableSwitchMissValCat"/>
<entry key="class_11" type="xstring" value="java.lang.Boolean"/>
<entry key="value_11" type="xboolean" value="true"/>
<entry key="key_12" type="xstring" value="processInMemory"/>
<entry key="class_12" type="xstring" value="java.lang.Boolean"/>
<entry key="value_12" type="xboolean" value="true"/>
<entry key="key_13" type="xstring" value="reportOnMissingValues"/>
<entry key="class_13" type="xstring" value="java.lang.Boolean"/>
<entry key="value_13" type="xboolean" value="true"/>
<entry key="key_14" type="xstring" value="labelThreshold"/>
<entry key="class_14" type="xstring" value="java.lang.Double"/>
<entry key="value_14" type="xdouble" value="0.05"/>
<entry key="key_15" type="xstring" value="cat"/>
<entry key="class_15" type="xstring" value="java.lang.String"/>
<entry key="value_15" type="xstring" value="Gender"/>
<entry key="key_16" type="xstring" value="enableViewControls"/>
<entry key="class_16" type="xstring" value="java.lang.Boolean"/>
<entry key="value_16" type="xboolean" value="true"/>
<entry key="key_17" type="xstring" value="enableColumnChooser"/>
<entry key="class_17" type="xstring" value="java.lang.Boolean"/>
<entry key="value_17" type="xboolean" value="true"/>
<entry key="key_18" type="xstring" value="showWarnings"/>
<entry key="class_18" type="xstring" value="java.lang.Boolean"/>
<entry key="value_18" type="xboolean" value="true"/>
<entry key="key_19" type="xstring" value="enableSubtitleEdit"/>
<entry key="class_19" type="xstring" value="java.lang.Boolean"/>
<entry key="value_19" type="xboolean" value="true"/>
<entry key="key_20" type="xstring" value="aggr"/>
<entry key="class_20" type="xstring" value="java.lang.String"/>
<entry key="value_20" type="xstring" value="Sum"/>
</config>
<config key="inObjects">
<entry key="numSettings" type="xint" value="1"/>
<config key="inObject_0">
<entry key="className" type="xstring" value="org.knime.dynamic.js.base.grouped.GroupedProcessor$GroupingResult"/>
<entry key="jsonValue" type="xstring" value="{&quot;table&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTable&quot;,&quot;id&quot;:&quot;cad3ec38-1c97-4cb9-bf8f-a50075aa960e&quot;,&quot;filtered&quot;:false,&quot;rows&quot;:[{&quot;data&quot;:[&quot;F&quot;,1.4813618675202267E7],&quot;rowKey&quot;:&quot;Row0&quot;},{&quot;data&quot;:[&quot;M&quot;,1.4545058545502335E7],&quot;rowKey&quot;:&quot;Row1&quot;}],&quot;fragment&quot;:false,&quot;spec&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTableSpec&quot;,&quot;numColumns&quot;:2,&quot;colNames&quot;:[&quot;Gender&quot;,&quot;Sum(CA)&quot;],&quot;numRows&quot;:2,&quot;colorModels&quot;:[],&quot;colTypes&quot;:[&quot;string&quot;,&quot;number&quot;],&quot;knimeTypes&quot;:[&quot;String&quot;,&quot;Number (double)&quot;],&quot;filterIds&quot;:[null,null],&quot;hiddenColumns&quot;:[],&quot;rowColorValues&quot;:[&quot;#404040&quot;,&quot;#404040&quot;],&quot;containsMissingValues&quot;:[false,false],&quot;extensionTypes&quot;:[],&quot;extensionNames&quot;:[],&quot;possibleValues&quot;:[[&quot;F&quot;,&quot;M&quot;],null],&quot;minValues&quot;:[&quot;F&quot;,1.4545058545502335E7],&quot;maxValues&quot;:[&quot;M&quot;,1.4813618675202267E7],&quot;rowSizeValues&quot;:null,&quot;numExtensions&quot;:0},&quot;dataHash&quot;:null,&quot;fragmentFirstRowIndex&quot;:0,&quot;totalFilteredRows&quot;:0,&quot;totalRows&quot;:0},&quot;uuid&quot;:&quot;6d80ad1c-cfaa-433f-901c-0cf5ba700833&quot;,&quot;translator&quot;:{&quot;mapping&quot;:{&quot;Row0&quot;:[&quot;Row0&quot;,&quot;Row1&quot;,&quot;Row6&quot;,&quot;Row4&quot;,&quot;Row5&quot;,&quot;Row2&quot;,&quot;Row3&quot;],&quot;Row1&quot;:[&quot;Row8&quot;,&quot;Row9&quot;,&quot;Row7&quot;,&quot;Row13&quot;,&quot;Row12&quot;,&quot;Row11&quot;,&quot;Row10&quot;]},&quot;forward&quot;:false,&quot;targetIDs&quot;:null,&quot;sourceID&quot;:null}}"/>
</config>
</config>
<entry key="warnMessage" type="xstring" value=""/>
<entry key="errorMessage" type="xstring" value=""/>
</config>
